"""This solution is correct but it does not handle large inputs"""
class Solution(object):
    def minOperations(self, boxes):
        """
        :type boxes: str
        :rtype: List[int]
        """
        result = []
        for i in range(0, len(boxes)):
            result.append(self.get_num_operations(i, boxes))
        return result
    def get_num_operations(self, index, string):
        """Returns the number of operations needed to move all the balls to string[i]"""
        num_operations = 0
        for i in range(0, len(string)):
            if i == index:
                continue
            current = string[i]
            if current == "1":
                # it is a ball and it needs to be moved
                if index > i:
                    # we are fetching from the left
                    temp = i
                    while temp < index:
                        temp+=1
                        num_operations += 1
                elif index < i:
                    #we are fetching from the right
                    temp = i
                    while temp > index:
                        temp -= 1
                        num_operations += 1
        return num_operations

s = Solution()
print(s.minOperations
